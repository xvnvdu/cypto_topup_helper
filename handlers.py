import math
import time
from datetime import datetime
from aiogram.filters import Command
from aiogram import F, Router, types, Bot

import payments
from payments import (pending_payments, pending_payments_info, rub_custom,
                      stars_custom, CustomPaymentRubState, CustomPaymentStarsState, SendToFriend,
                      pending_sending_amount, pending_sending_id, pending_sending_message, send_to_user)
from aiogram.fsm.context import FSMContext
from aiogram.handlers import CallbackQueryHandler
from main import (users_data, users_payments, users_data_dict, users_payments_dict,
                  save_data, save_payments, total_values, save_total, id_generator)
from bot_buttons import (menu_keyboard, account_keyboard, payment_keyboard,
                         withdraw_keyboard, stars_keyboard, yk_payment_keyboard,
                         zero_transactions_keyboard, log_buttons, send_keyboard, try_again_amount_keyboard,
                         step_back_keyboard, try_again_id_keyboard, confirm_sending_keyboard, skip_message_keyboard)
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, PreCheckoutQuery


router = Router()



@router.message(Command('menu'))
async def command_menu(message: Message):
    user_id = message.from_user.id
    user_data = users_data_dict[user_id]
    print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∫–æ–º–∞–Ω–¥–æ–π –º–µ–Ω—é')
    if user_data['Is_verified']:
        await message.answer( '<strong>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:</strong>',
                         parse_mode='HTML', reply_markup=menu_keyboard)
    else:
        await confirm_phone(message)


@router.message(Command('account'))
async def command_account(message: Message):
    user_id = message.from_user.id
    user_data = users_data_dict[user_id]
    phone = int(user_data['Phone']) // 10**4
    balance = user_data['Balance']
    registration_date = user_data['Registration']
    volume = user_data['Funding_volume']
    days_count = (datetime.now() - datetime.strptime(registration_date, '%d.%m.%Y')).days
    if days_count % 10 == 1 and days_count % 100 != 11:
        days = '–¥–µ–Ω—å'
    elif days_count % 10 in [2, 3, 4] and not (11 <= days_count % 100 <= 19):
        days = '–¥–Ω—è'
    else:
        days = '–¥–Ω–µ–π'
    print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∫–æ–º–∞–Ω–¥–æ–π –∞–∫–∫–∞—É–Ω—Ç')
    if user_data['Is_verified']:
        await message.answer(f'<strong>–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç</strong>\n\n'
                             f'‚öôÔ∏è <strong>ID:</strong> <code>{message.from_user.id}</code>\n'
                             f'üîí <strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> <code>{phone}****</code>\n'
                             f'üóì <strong>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</strong> <code>{registration_date} ({days_count} {days})</code>\n\n'
                             f'üíµ <strong>–ú–æ–π –±–∞–ª–∞–Ω—Å: </strong><code>{balance}‚ÇΩ</code>\n'
                             f'üíé <strong>–ú–æ–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: </strong><code>{volume}‚ÇΩ</code>',
                             parse_mode='HTML', reply_markup=account_keyboard)
    else:
        await confirm_phone(message)


@router.message(Command('balance'))
async def command_balance(message: Message):
    user_id = message.from_user.id
    user_data = users_data_dict.get(user_id)
    print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∫–æ–º–∞–Ω–¥–æ–π –±–∞–ª–∞–Ω—Å')
    if user_data['Is_verified']:
        await message.answer('<strong>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:</strong>',
                         parse_mode='HTML', reply_markup=payment_keyboard)
    else:
        await confirm_phone(message)


@router.message(Command('withdraw'))
async def command_withdraw(message: Message):
    user_id = message.from_user.id
    user_data = users_data_dict[user_id]
    print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∫–æ–º–∞–Ω–¥–æ–π –≤—ã–≤–µ—Å—Ç–∏')
    if user_data['Is_verified']:
        await message.answer('<strong>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...</strong>',
                         parse_mode='HTML', reply_markup=withdraw_keyboard)
    else:
        await confirm_phone(message)


@router.message(Command('start'))
async def start(message: Message):
    user_id = message.from_user.id
    user = {'ID': user_id, 'Name': message.from_user.first_name,
            'Surname': message.from_user.last_name,
            'Username': message.from_user.username, 'Phone': None,
            'Is_verified': False, 'Registration': None, 'Balance': 0,
            'Funding_volume': 0}
    user_payments = {'ID': user_id,
                     'Transactions': {}
    }
    print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∫–æ–º–∞–Ω–¥–æ–π —Å—Ç–∞—Ä—Ç')
    if user_id not in users_data_dict:
        total_values['Total_users'] += 1
        await message.answer('–ü—Ä–∏–≤–µ—Ç! ü§ñ\n–ö–∞–∫ —Ç—ã –º–æ–≥ –∑–∞–º–µ—Ç–∏—Ç—å, —Å —Å–∞–π—Ç–∞ 5sim.biz '
                             '–ø—Ä–æ–ø–∞–ª–∏ –≤—Å–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞, '
                             '–∫—Ä–æ–º–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.\n–ù–µ –≤–æ–ª–Ω—É–π—Å—è, —è —Å–æ–∑–¥–∞–Ω, '
                             '—á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º, –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, '
                             '–µ—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –±–∏—Ä–∂–∏ –∏–ª–∏ –∫–æ—à–µ–ª—å–∫–∞, —Å –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã –º–æ–≥ '
                             '–±—ã –ø–æ–ø–æ–ª–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ! ü§©')
        users_data.append(user)
        users_payments.append(user_payments)
        await save_data()
        await save_payments()
        await save_total()
        users_payments_dict[user_id] = user_payments
        users_data_dict[user_id] = user

    user_data = users_data_dict[user_id]

    if not user_data['Is_verified']:
        await confirm_phone(message)
    else:
        await command_menu(message)


@router.pre_checkout_query()
async def pre_checkout_query(pre_checkout_query: PreCheckoutQuery, bot: Bot):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@router.message(F.successful_payment)
async def successful_payment(message: Message):
    user_id = message.from_user.id
    user_data = users_data_dict[user_id]
    user_payment = users_payments_dict[user_id]['Transactions']
    today = datetime.now().strftime('%d.%m.%Y')
    time_now = datetime.now().strftime('%H:%M:%S')
    print(pending_payments, '—è —Ç—É—Ç')
    await message.answer('<strong>–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞—è üéâ</strong>\n<i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: '
                         '–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏ —Ç—É –∂–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–≤–∞–∂–¥—ã, '
                         '–≤–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –Ω–µ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω–∞!</i>', parse_mode= 'HTML')
    if message.from_user.id in pending_payments:
        amount = pending_payments[user_id]
        trx_type = pending_payments_info[user_id]
        trx_id = await id_generator()
        total_values['Total_topups_count'] += 1
        total_values['Total_topups_volume'] += amount
        total_values['Total_transactions_count'] += 1
        trx_num = total_values['Total_transactions_count']
        user_data['Balance'] += amount
        user_data['Funding_volume'] += amount
        await save_total()
        await save_data()
        if today not in user_payment:
            user_payment[today] = {time_now: {'RUB': amount,
                                              'transaction_num': trx_num,
                                              'type': trx_type, 'trx_id': trx_id}}
            await save_payments()
        else:
            user_payment[today][time_now] = {'RUB': amount,
                                             'transaction_num': trx_num,
                                             'type': trx_type, 'trx_id': trx_id}
            await save_payments()
        del pending_payments_info[user_id]
        del pending_payments[user_id]
        print(pending_payments)


@router.message(F.contact)
async def check_contact(message: Message):
    user_id = message.from_user.id

    if message.contact is not None and message.contact.user_id == user_id:
        user_data = users_data_dict[user_id]
        user_data['Phone'] = message.contact.phone_number
        user_data['Is_verified'] = True
        user_data['Registration'] = time.strftime('%d.%m.%Y')
        total_values['Total_verified_users'] += 1
        await save_total()
        await save_data()
        remove_button = types.ReplyKeyboardRemove()
        await message.answer('<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b> üéâ\n'
                             '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.', parse_mode='HTML',
                             reply_markup=remove_button)
        await command_menu(message)
    else:
        await confirm_phone(message)


@router.callback_query()
async def callback(call: CallbackQueryHandler, bot: Bot, state: FSMContext):
    user_id = call.from_user.id
    user_data = users_data_dict[user_id]

    phone = int(user_data['Phone']) // 10**4
    balance = user_data['Balance']
    registration_date = user_data['Registration']
    volume = user_data['Funding_volume']

    days_count = (datetime.now() - datetime.strptime(registration_date, '%d.%m.%Y')).days
    if days_count % 10 == 1 and days_count % 100 != 11:
        days = '–¥–µ–Ω—å'
    elif days_count % 10 in [2, 3, 4] and not (11 <= days_count % 100 <= 19):
        days = '–¥–Ω—è'
    else:
        days = '–¥–Ω–µ–π'

    current_page = await state.get_data()
    current_page = current_page.get('current_page', 0)
    trx_log = await sorted_payments(call)
    total_pages = math.ceil((len(trx_log)-1) / 15)
    first_page_line = current_page * 15
    last_page_line = first_page_line + 15
    page_text = '\n'.join(trx_log[first_page_line:last_page_line])

    if call.data == 'account':
        print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ—à–µ–ª –≤ –∞–∫–∫–∞—É–Ω—Ç')
        await call.message.edit_text(f'<strong>–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç</strong>\n\n'
                                     f'‚öôÔ∏è <strong>ID:</strong> <code>{call.from_user.id}</code>\n'
                                     f'üîí <strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> <code>{phone}****</code>\n'
                                     f'üóì <strong>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</strong> <code>{registration_date} ({days_count} {days})</code>\n\n'
                                     f'üíµ <strong>–ú–æ–π –±–∞–ª–∞–Ω—Å: </strong><code>{balance}‚ÇΩ</code>\n'
                                     f'üíé <strong>–ú–æ–π –æ–±—ä–µ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: </strong><code>{volume}‚ÇΩ</code>',
                                     parse_mode='HTML', reply_markup=account_keyboard)
    elif call.data == 'transactions':
        print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ—à–µ–ª –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
        if users_data_dict[user_id]['Balance'] == 0:
            await call.message.edit_text('<strong>üíî –í—ã –µ—â–µ –Ω–µ —Å–æ–≤–µ—Ä—à–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.</strong>',
                                         parse_mode='HTML', reply_markup=zero_transactions_keyboard)
        else:
            current_page = 0
            await state.update_data(current_page=current_page)
            await log_buttons(call, page_text, current_page, total_pages)
    elif call.data == 'next_page':
        current_page += 1
        await state.update_data(current_page=current_page)
        first_page_line = current_page * 15
        last_page_line = first_page_line + 15
        page_text = '\n'.join(trx_log[first_page_line:last_page_line])
        await log_buttons(call, page_text, current_page, total_pages)
    elif call.data == 'prev_page':
        current_page -= 1
        await state.update_data(current_page=current_page)
        first_page_line = current_page * 15
        last_page_line = first_page_line + 15
        page_text = '\n'.join(trx_log[first_page_line:last_page_line])
        await log_buttons(call, page_text, current_page, total_pages)
    elif call.data == 'send':
        print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ—à–µ–ª –≤ –ø–µ—Ä–µ–≤–æ–¥ –±–∞–ª–∞–Ω—Å–∞')
        await call.message.edit_text('üéÅ –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ç—ã –º–æ–∂–µ—à—å <strong>–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏</strong> —Å–æ —Å–≤–æ–µ–≥–æ '
                                     '–±–∞–ª–∞–Ω—Å–∞ –¥—Ä—É–≥—É, –Ω–∞ —Å–≤–æ–π –≤—Ç–æ—Ä–æ–π –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –ª—é–±–æ–º—É –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, '
                                     '–∫–æ—Ç–æ—Ä—ã–π <strong>—É–∂–µ –ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ—Ç–æ–º!</strong>\n\n<i>–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è '
                                     '–æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∏–∂–µ:</i>', parse_mode='HTML', reply_markup=send_keyboard)
        await state.set_state(SendToFriend.amount_input)

    elif call.data == 'choose_id':
        await call.message.edit_text('<strong>üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.</strong>\n\n<i>–í–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ '
                                 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –Ω–∏–∂–µ:</i>', parse_mode='HTML', reply_markup=step_back_keyboard)
        await state.set_state(SendToFriend.id_input)
    elif call.data == 'confirm_sending':
        await state.clear()
        pending_sending_message[user_id] = None
        await call.message.answer(f'<strong>–í—ã –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ: <code>{pending_sending_amount[user_id]}‚ÇΩ</code>\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é '
                             f'–ø–æ–¥ ID: <code>{pending_sending_id[user_id]}</code>\n\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?</strong>',
                             parse_mode='HTML', reply_markup=confirm_sending_keyboard)
    elif call.data == 'sending_confirmed':
        await send_to_user(call, bot, state)
        await call.message.edit_text('<strong>üéÅ –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</strong>\n\n<i>–ü–æ–ª—É—á–∞—Ç–µ–ª—é –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å '
                                     '—Å—É–º–º–æ–π –ø–µ—Ä–µ–≤–æ–¥–∞, –≤–∞—à–∏–º ID –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏.</i>', parse_mode='HTML', reply_markup=send_keyboard)
    elif call.data == 'topup':
        print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ—à–µ–ª –≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ')
        await call.message.edit_text('<strong>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:</strong>',
                                     parse_mode='HTML', reply_markup=payment_keyboard)
    elif call.data == 'withdraw':
        print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ—à–µ–ª –≤ –≤—ã–≤–æ–¥')
        await call.message.edit_text('<strong>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...</strong>',
                                     parse_mode='HTML', reply_markup=withdraw_keyboard)
    elif call.data == 'back':
        await call.message.edit_text('<strong>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:</strong>',
                                     parse_mode='HTML', reply_markup=menu_keyboard)
    elif call.data == 'YK':
        print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ—à–µ–ª –≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ yk')
        if user_id in pending_payments:
            del pending_payments[user_id]
            del pending_payments_info[user_id]
        await call.message.edit_text('<strong>–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–µ –≤—Ä—É—á–Ω—É—é:</strong>\n'
                                     '<i>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ÆKassa ‚Äî 60‚ÇΩ</i>\n\n'
                                     '<i>‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –ÆKassa'
                                     ' –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ, –ª—é–±—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –¥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'
                                     ' –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –±—É–¥—É—Ç –æ–±–Ω—É–ª–µ–Ω—ã!</i>',
                                     parse_mode='HTML', reply_markup=yk_payment_keyboard)
        await state.set_state(CustomPaymentRubState.waiting_for_custom_amount)
    elif call.data == 'stars':
        print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ—à–µ–ª –≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ stars')
        if user_id in pending_payments:
            del pending_payments[user_id]
            del pending_payments_info[user_id]
        await call.message.edit_text('<strong>–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–µ –≤—Ä—É—á–Ω—É—é:</strong>',
                                     parse_mode='HTML', reply_markup=stars_keyboard)
        await state.set_state(CustomPaymentStarsState.waiting_for_custom_amount)
    elif call.data == '100_in_stars':
        await payments.stars_63(call, bot)
    elif call.data == '200_in_stars':
        await payments.stars_125(call, bot)
    elif call.data == '400_in_stars':
        await payments.stars_250(call, bot)
    elif call.data == '500_in_stars':
        await payments.stars_313(call, bot)
    elif call.data == '100_in_rub':
        await payments.rub_100(call, bot)
    elif call.data == '200_in_rub':
        await payments.rub_200(call, bot)
    elif call.data == '400_in_rub':
        await payments.rub_400(call, bot)
    elif call.data == '500_in_rub':
        await payments.rub_500(call, bot)


async def sorted_payments(call: CallbackQueryHandler):
    user_id = call.from_user.id
    user_transactions_info = users_payments_dict[user_id]['Transactions']
    sorted_dates = sorted(user_transactions_info.keys(), reverse=True)
    trx_log = []

    line_count = 0
    for date in sorted_dates:
        trx_log.append(f'‚úß<strong>{date}</strong>')
        line_count += 1
        trx_by_time = sorted(user_transactions_info[date].keys(), reverse=True)

        for count, time in enumerate(trx_by_time):
            trx = user_transactions_info[date][time]
            rub_amount = trx['RUB']
            trx_id = trx['trx_id']
            trx_type = trx['type']

            time_input = datetime.strptime(time, '%H:%M:%S')
            time_output = time_input.strftime('%H:%M')

            if count < len(trx_by_time)-1:
                line_count += 1
                if (line_count - 1) % 15 == 0:
                    trx_log.append(f'‚úß<strong>{date}</strong>')
                    line_count += 1
                trx_log.append(f'‚îú <i>{time_output}</i> - <code>{rub_amount}‚ÇΩ</code> -'
                               f'<i>{trx_type}</i> - (<code>‚Ññ{trx_id}</code>)')
            else:
                line_count += 1
                if (line_count - 1) % 15 == 0:
                    trx_log.append(f'‚úß<strong>{date}</strong>')
                    line_count += 1
                trx_log.append(f'‚îî <i>{time_output}</i> - <code>{rub_amount}‚ÇΩ</code> - '
                               f'<i>{trx_type}</i> - (<code>‚Ññ{trx_id}</code>)')
                trx_log.append('')
                line_count += 1
    return trx_log


@router.message(SendToFriend.amount_input)
async def send_money(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_amount = message.text.replace(',', '.')
    user_data = users_data_dict[user_id]
    balance = user_data['Balance']
    try:
        amount = float(user_amount)
        amount = int(amount)
        await message.delete()
        if amount <= 0:
            await message.answer('<strong>‚ö†Ô∏è –°—É–º–º–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.</strong>\n<i>–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—É–º–º—É '
                                 '–º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω—É—é –Ω—É–ª—é.</i>', parse_mode='HTML', reply_markup=try_again_amount_keyboard)
        elif int(balance) < amount:
            await message.answer('<strong>‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.</strong>\n<i>–£–º–µ–Ω—å—à–∏—Ç–µ —Å—É–º–º—É '
                                 '–∏–ª–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.</i>', parse_mode='HTML', reply_markup=try_again_amount_keyboard)
        else:
            pending_sending_amount[user_id] = amount
            await message.answer('<strong>üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.</strong>\n\n<i>–í–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ '
                                 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –Ω–∏–∂–µ:</i>', parse_mode='HTML',
                                 reply_markup=step_back_keyboard)
            await state.set_state(SendToFriend.id_input)

    except ValueError:
        await message.delete()
        await message.answer('<strong>‚ö†Ô∏è –°—É–º–º–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</strong>',
                             parse_mode='HTML', reply_markup=try_again_amount_keyboard)


@router.message(SendToFriend.id_input)
async def send_money(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_input = message.text

    try:
        send_to = int(user_input)
        await message.delete()
        if send_to == user_id:
            await message.answer(
                '<strong>‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Å–∞–º–æ–º—É —Å–µ–±–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</strong>',
                parse_mode='HTML', reply_markup=try_again_id_keyboard)
        elif send_to not in users_data_dict:
            await message.answer(
                '<strong>‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.</strong>\n\n<i>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ '
                '–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å ID.</i>', parse_mode='HTML', reply_markup=try_again_id_keyboard)
        elif not users_data_dict[send_to]['Is_verified']:
            await message.answer('<strong>‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.</strong>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø–æ–ø—Ä–æ—Å–∏—Ç—å '
                '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.</i>', parse_mode='HTML', reply_markup=try_again_id_keyboard)
        else:
            pending_sending_id[user_id] = send_to
            await state.set_state(SendToFriend.message_input)
            await message.answer(f'üì© <strong>–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'
                                 f'</strong>\n<i>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–µ–Ω–∏–µ, —á—Ç–æ –ª—é–±—ã–µ –ø—Ä–µ–º–∏—É–º-—ç–º–æ–¥–∑–∏, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±—É–¥—É—Ç '
                                 f'–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –≤ –æ–±—ã—á–Ω—ã–µ.</i>\n\n<i>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ:</i>',
                                 parse_mode='HTML', reply_markup=skip_message_keyboard)
    except ValueError:
        await message.delete()
        await message.answer('<strong>‚ö†Ô∏è ID –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</strong>',
                             parse_mode='HTML', reply_markup=try_again_id_keyboard)


@router.message(SendToFriend.message_input)
async def send_money(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_input = message.text
    try:
        send_message = str(user_input)
        pending_sending_message[user_id] = send_message
        await message.delete()
        await message.answer(f'<strong>–í—ã –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ: <code>{pending_sending_amount[user_id]}‚ÇΩ</code>\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é '
                             f'–ø–æ–¥ ID: <code>{pending_sending_id[user_id]}</code>\n–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</strong> '
                             f'{pending_sending_message[user_id]}\n\n<strong>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?</strong>',
                             parse_mode='HTML', reply_markup=confirm_sending_keyboard)
    except:
        await message.answer('<strong>‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!</strong>', parse_mode='HTML',
                             reply_markup=try_again_id_keyboard)
    await state.clear()


@router.message(CustomPaymentRubState.waiting_for_custom_amount)
async def process_custom_rub_amount(message: Message, bot: Bot, state: FSMContext):
    user_id = message.from_user.id
    user_input = message.text.replace(',', '.')
    try:
        amount = float(user_input)
        amount = int(amount)
        if amount >= 60:
            pending_payments[user_id] = amount
            pending_payments_info[user_id] = '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ‚Äî –ÆKassa'
            await message.delete()
            await rub_custom(message, bot, state)
        else:
            await message.delete()
            await message.answer('<strong>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:</strong>',
                                 parse_mode='HTML', reply_markup=payment_keyboard)
    except ValueError:
        await message.delete()
        await message.answer('<strong>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:</strong>',
                                     parse_mode='HTML', reply_markup=payment_keyboard)
    await state.clear()


@router.message(CustomPaymentStarsState.waiting_for_custom_amount)
async def process_custom_stars_amount(message: Message, bot: Bot, state: FSMContext):
    user_id = message.from_user.id
    user_input = message.text.replace(',', '.')
    try:
        amount = float(user_input)
        amount = int(amount)
        if amount > 0:
            pending_payments[user_id] = amount
            pending_payments_info[user_id] = '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ‚Äî Stars'
            await message.delete()
            await stars_custom(message, bot, state)
        else:
            await message.delete()
            await message.answer('<strong>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:</strong>',
                                 parse_mode='HTML', reply_markup=payment_keyboard)
    except ValueError:
        await message.delete()
        await message.answer('<strong>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:</strong>',
                                     parse_mode='HTML', reply_markup=payment_keyboard)
    await state.clear()


@router.message()
async def any_message(message: Message, state: FSMContext):
    await command_menu(message)
    await state.clear()


@router.message()
async def confirm_phone(message: Message):
    user_id = message.from_user.id
    user_data = users_data_dict[user_id]

    if not user_data['Is_verified']:
        button_phone = [
            [KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]
            ]
        markup = ReplyKeyboardMarkup(keyboard=button_phone, resize_keyboard=True)
        await message.answer('‚òéÔ∏è <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω</b>\n\n'
                             '–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>'
                             ' –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.\n\n'
                             '–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.',
                             parse_mode='HTML', reply_markup=markup)
    else:
        return

